name: On pull request

#on:
#  - pull_request

#on:
#  push:
#    branches: [ main ]

on:
  pull_request:
    branches:
      - main
    types: [closed]


jobs:
  run_if:
#    Run only if the closed pull request is on the main branch and starts with 'release-please--branches--main--components--tools/kysor'
    if : |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.base.ref == 'main' &&
      startsWith(github.event.pull_request.head.ref, 'release-please--branches--main--components--tools/kysor')
#    if: startsWith(github.head_ref, 'release-please--branches--main--components--tools/kysor')
    name: "On Kysor release PR"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      # Set working directory
      - name: Set working directory
        run: echo 'WORKING_DIR=tools/kysor' >> $GITHUB_ENV
      # Print .release-please-manifest.json
      - name: Print .release-please-manifest.json
        run: cat .release-please-manifest.json | jq -r '.["tools/kysor"]'
      # Get kysor version and save it to an environment variable
      - name: Get kysor version
        run: echo "VERSION=$(cat .release-please-manifest.json | jq -r '.["tools/kysor"]')" >> $GITHUB_ENV
      # Setup Golang from working directory
      - name: 🐿 Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version-file: ${{ env.WORKING_DIR }}/go.mod
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum
#      # Build
#      - name: Build
#        run: make release
#        working-directory: ${{ env.WORKING_DIR }}
#        env:
#          VERSION: ${{ env.VERSION }}
      # Generate Release Body
      - name: Generate Release Body
        run: npx extract-changelog-release  ${{ github.workspace }}/${{env.WORKING_DIR}}/CHANGELOG.md > RELEASE_BODY.md
      # Print release body
      - name: Print release body
        run: cat RELEASE_BODY.md
      # Publish the Release
      - name: Publish the Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_BODY.md
          files: ${{ env.WORKING_DIR }}/release/*
          tag_name: ${{ matrix.tag }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
