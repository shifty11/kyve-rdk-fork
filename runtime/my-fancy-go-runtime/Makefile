# Shortcut targets
default: docker-image

###############################################################################
# Both native and cross architecture builds are supported.
# The target architecture is select by setting the ARCH variable.
# When ARCH is undefined it is set to the detected host architecture.
# When ARCH differs from the host architecture a crossbuild will be performed.
ARCHES = amd64 armv7 arm64

GOOS ?= $(shell uname | tr '[:upper:]' '[:lower:]')

# BUILDARCH is the host architecture
# ARCH is the target architecture
# we need to keep track of them separately
BUILDARCH ?= $(shell uname -m)

# canonicalized names for host architecture
ifeq ($(BUILDARCH),aarch64)
	BUILDARCH=arm64
endif
ifeq ($(BUILDARCH),x86_64)
	BUILDARCH=amd64
endif
ifeq ($(BUILDARCH),armv7l)
	BUILDARCH=armv7
endif

# unless otherwise set, I am building for my own architecture, i.e. not cross-compiling
ARCH ?= $(BUILDARCH)

###############################################################################

GO_VERSION := $(shell go version | cut -c 14- | cut -d' ' -f1 | cut -d'.' -f1,2)
DOCKERFILE ?= Dockerfile
VERSION ?= notset
DOCKER_IMAGE_NAME=my-fancy-go-runtime
BINARY_NAME ?= my-fancy-go-runtime-$(GOOS)-$(ARCH)
CGO_ENABLED=0

###############################################################################

ldflags := $(LDFLAGS)
ldflags += -X github.com/KYVENetwork/kyve-rdk/runtime/my-fancy-go-runtime/server.version=$(VERSION)
ldflags := $(strip $(ldflags))

BUILD_FLAGS := -ldflags '$(ldflags)'

.PHONY: ensure_version build format lint test test-e2e docker-image docker-run

###############################################################################
###                                 Checks                                  ###
###############################################################################

ensure_version:
ifneq ($(GO_VERSION),1.22)
	$(error ‚ùå  Please run Go v1.22.x..)
endif

###############################################################################
###                          Formatting & Linting                           ###
###############################################################################

gofumpt_cmd=mvdan.cc/gofumpt
golangci_lint_cmd=github.com/golangci/golangci-lint/cmd/golangci-lint

format:
	@echo "üìù Running formatter..."
	@go run $(golangci_lint_cmd) run --timeout=10m
	@echo "‚úÖ Completed formatting!"

lint:
	@echo "üìù Running linter..."
	@go run $(golangci_lint_cmd) run --timeout=10m --allow-parallel-runners
	@echo "‚úÖ Completed linting!"

###############################################################################
### 						 	   Testing									###
###############################################################################

test:
	@echo "üß™ Running tests..."
	@./scripts/test.sh
	@echo "‚úÖ Completed tests!"

test-e2e:
	@echo "üß™ Running end-to-end tests..."
	@../../test/e2e/run-e2e-tests.sh "-test.run '/my-fancy-go-runtime\$$'"
	@echo "‚úÖ Completed end-to-end tests!"

###############################################################################
###  						 Building the binary							###
###############################################################################

build: ensure_version
	@echo "üê≥ Building docker image..."
	go build -o build/$(BINARY_NAME) $(BUILD_FLAGS) .
	@echo "‚úÖ Completed binary build!"

###############################################################################
### 							 	Docker 							 		###
###############################################################################

docker-image:
	@echo "üèóÔ∏è  Building docker image..."
	DOCKER_BUILDKIT=1 docker build --platform linux/$(ARCH) -t $(DOCKER_IMAGE_NAME):$(VERSION) --build-arg VERSION=$(VERSION) .
	@echo "‚úÖ Completed docker image build!"

docker-run:
	docker run -it --rm -p 50051:50051 $(DOCKER_IMAGE_NAME):$(VERSION)